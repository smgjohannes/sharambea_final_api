const { Op } = require('sequelize');
const db = require('../../models');
const Email = require('../../utils/email');
const { NotFoundError } = require('../../utils/coreErrors');
const { generateToken } = require('../../utils/generateToken');

const CLIENT_URL = process.env.CLIENT_URL;

/**
 * @description Generate a forgot password link and send it to the user.
 * @param {string} email - Email of the user who forgot his password.
 * @param {string} ip - IP address linked to the request.
 * @param {Object} useragent - Device linked to this request.
 * @example
 * eventclub.auth.forgotPassword('test@test.na', 127.0.0.0, "xxxx");
 */
async function forgotPassword(email, ip, useragent) {
  const user = await db.User.findOne({
    where: {
      email,
    },
  });

  if (user === null) {
    throw new NotFoundError('User not found or account is not yet active');
  }

  // generate a tokens
  const { token, hash } = generateToken();

  // save reset token
  await user.update({
    reset_hash: hash,
    reset_expires: new Date(new Date().getTime() + 10 * 60 * 1000),
  });

  // send the token
  const message = `A password reset was requested for your http://eventclub.com.na Account.
                    Please click on the following link to reset ${CLIENT_URL}/auth/reset-password?token=${token} your password
                    It is safe to ignore this email if this password request was NOT generated by you.`;

  await new Email(user.get('email'), 'Password Reset', message, {
    url: `${CLIENT_URL}/auth/reset-password?token=${token}`,
    name: user.name,
  }).sendPasswordReset();

  // log reset request
  await db.PasswordReset.create({
    email,
    user_agent: useragent,
    ip_address: ip,
    timestamp: Date.now(),
  });

  return { success: true };
}

module.exports = {
  forgotPassword,
};
